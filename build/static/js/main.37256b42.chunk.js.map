{"version":3,"sources":["SignatureForm.js","App.js","serviceWorker.js","index.js"],"names":["defaultValues","firstname","lastname","email","postcode","country","comment","useStyles","makeStyles","theme","container","display","flexWrap","bigHelper","marginLeft","spacing","marginRight","marginTop","marginBottom","fontSize","width","color","padding","lineHeight","textField","menu","textShadow","borderColor","borderWidth","countries","name","iso","SignatureForm","props","classes","useForm","register","handleSubmit","setValue","errors","setError","clearError","watch","options","margin","variant","useEffect","document","querySelectorAll","forEach","input","oninvalid","e","target","attributes","nodeValue","type","validationMessage","handleBlur","checkValidity","validity","valid","className","onSubmit","data","console","log","method","url","Container","component","maxWidth","Grid","item","xs","sm","TextField","id","label","placeholder","autoComplete","required","inputRef","onBlur","error","helperText","message","select","value","onChange","InputLabelProps","shrink","length","SelectProps","native","MenuProps","key","map","option","multiline","rowsMax","FormHelperText","privacy","RadioGroup","aria-label","FormControlLabel","control","Radio","Button","fullWidth","size","endIcon","require","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37256b42.chunk.js","sourcesContent":["import React, { useEffect} from \"react\";\n\nimport { Container, Grid } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {TextField, Radio, RadioGroup, FormControlLabel, Button, FormHelperText} from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport useForm from \"react-hook-form\";\n//import {TextField} from \"react-hook-form-input\";\n\nconst defaultValues = {\n  firstname: \"\",\n  lastname: \"\",\n  email: \"\",\n  postcode: \"\",\n  country: \"\",\n  comment: \"\"\n};\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  bigHelper: {\n    marginLeft: theme.spacing(0),\n    marginRight: theme.spacing(0),\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(0),\n    fontSize:\"1em\",\n    width: \"100%\",\n    color:\"black\",\n    padding:\"4px\",\n    lineHeight:\"inherit\"\n  },\n  textField: {\n    marginLeft: theme.spacing(0),\n    marginRight: theme.spacing(0),\n    width: \"100%\"\n  },\n  menu: {\n  },\n  '@global': {\n    'select:-moz-focusring': {\n      color: \"transparent\",\n      textShadow: \"0 0 0 #000\",\n    },\n    'input:valid + fieldset': {\n      borderColor: 'green',\n      borderWidth: 2,\n    },\n  }\n}));\n\nconst countries = [\n  {\n    name: \"Switzerland\",\n    iso: \"CH\"\n  },\n  {\n    name: \"France\",\n    iso: \"FR\"\n  }\n];\n\nexport default function SignatureForm(props) {\n  const classes = useStyles();\n  const { register, handleSubmit, setValue, errors,setError,clearError,watch } = useForm({\n//    mode: \"onBlur\",\n//    nativeValidation: true,\n    defaultValues: defaultValues\n  });\n  //  const { register, handleSubmit, setValue, errors } = useForm({ mode: 'onBlur', defaultValues: defaultValues });\n\n  const country=watch('country');\n  const options = {\n    margin: props.margin || \"dense\",\n    variant: props.variant || \"filled\"\n  };\n  //variant: standard, filled, outlined\n  //margin: normal, dense\n\n  //const selectValue = watch(\"select\");\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    //    register({ name: \"email\" });\n        register({ name: \"country\" });\n  }, [register]);\n\n  useEffect(() => {\n    const inputs = document.querySelectorAll(\"input, select, textarea\");\n    // todo: workaround until the feature is native react-form ?\n    inputs.forEach (input => {\n      input.oninvalid =(e) => {\n        setError(e.target.attributes.name.nodeValue, e.type, e.target.validationMessage);\n      };\n\n    });\n\n  },[register,setError]);\n\n  const selectChange = e => {\n    console.log(e.target);\n    console.log(e.target.value);\n    setValue(\"country\",e.target.value);\n  };\n  const handleBlur = e => {\n    e.target.checkValidity();\n    if (e.target.validity.valid) {\n      clearError(e.target.attributes.name.nodeValue);\n      return;\n    }\n//    setError(e.target.attributes.name.nodeValue, \"aa\"+e.target.attributes.name.nodeValue, e.target.validationMessage);\n  };\n\n  return (\n    <form className={classes.container} onSubmit={handleSubmit(onSubmit)} method=\"post\" url=\"http://localhost\">\n      <Container component=\"main\" maxWidth=\"sm\">\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"firstname\"\n              name=\"firstname\"\n              label=\"First Name\"\n              className={classes.textField}\n              placeholder=\"eg. Leonardo\"\n    autoComplete=\"given-name\"\n              required\n              inputRef={register}\n              onBlur = {handleBlur}\n              error={!!(errors && errors.firstname)}\n              helperText={errors && errors.firstname && errors.firstname.message}\n              variant={options.variant}\n              margin={options.margin}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"lastname\"\n              name=\"lastname\"\n              label=\"Last Name\"\n    autoComplete=\"family-name\"\n              className={classes.textField}\n              variant={options.variant}\n              margin={options.margin}\n              inputRef={register}\n              placeholder=\"eg. Da Vinci\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              label=\"Email\"\n    autoComplete=\"email\"\n              className={classes.textField}\n              inputRef={register}\n              onBlur = {handleBlur}\n              error={!!(errors && errors.email)}\n              helperText={errors && errors.email && errors.email.message}\n              variant={options.variant}\n              margin={options.margin}\n              placeholder=\"your.email@example.org\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} sm={3}>\n            <TextField\n              id=\"postcode\"\n              name=\"postcode\"\n              label=\"Postal Code\"\n    autoComplete=\"postal-code\"\n              inputRef={register}\n              className={classes.textField}\n              variant={options.variant}\n              margin={options.margin}\n            />\n          </Grid>\n          <Grid item xs={12} sm={9}>\n            <TextField\n              select\n              id=\"country\"\n              name=\"country\"\n              label=\"Country\"\n              className={classes.textField}\n              variant={options.variant}\n              inputRef={register}\n              //value={defaultValues.country}\n              value={country}\n              onChange={selectChange}\n              InputLabelProps={{ shrink: country.length > 0 }}\n              SelectProps={{\n                native: true,\n                MenuProps: {\n                  className: classes.menu,\n                },\n              }}\n              margin={options.margin}\n              required\n            >\n              <option key=\"\" value=\"\" ></option>\n              {countries.map(option => (\n                <option key={option.iso} value={option.iso}>\n              {option.name}\n            </option>\n              ))}\n            </TextField>\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"comment\"\n              name=\"comment\"\n              className={classes.textField}\n              multiline\n              rowsMax=\"20\"\n              label=\"Comment\"\n              inputRef={register}\n              variant={options.variant}\n              margin={options.margin}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormHelperText\n              className={classes.bigHelper}\n              error={errors && errors.privacy}\n              variant={options.variant}\n              margin={options.margin}\n            > \n            I agree to OrganisationName contacting me about important campaigns *\n            </FormHelperText>\n          </Grid>\n          <Grid item xs={12}>\n            <RadioGroup aria-label=\"privacy consent\" name=\"privacy\" required>\n              <FormControlLabel\n                value=\"opt-in\"\n                inputRef={register}\n                control={<Radio color=\"primary\" />}\n                label=\"Yes, keep me informed via email\"\n              />\n\n              <FormControlLabel\n                value=\"opt-out\"\n                control={<Radio />}\n                inputRef={register({required:\"Yes or No?\"})}\n                label=\"No, don't send me emails or keep me updated in future\"\n              />\n            </RadioGroup>\n          </Grid>\n          <Grid item xs={12}>\n            Your personal information will be kept private and held securely. By\n            submitting information you are agreeing to the use of data and\n            cookies in accordance with our privacy policy.\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              size=\"large\"\n              endIcon={<SendIcon />}\n            >\n              {\" \"}\n              Sign!\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n    </form>\n  );\n}\n\n","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport SignatureForm from './SignatureForm';\nconst querystring = require('querystring');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignatureForm margin= \"dense\" variant= \"filled\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}